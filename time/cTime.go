package time

import (
	"fmt"
	"strings"
	"time"
)

// ============================================================================
// ============================================================================
// ============================================================================
// common time conversion function
// ============================================================================
// ============================================================================
// ============================================================================

// ========================================================
// toString returns the time in the custom format
// ========================================================
func toString(t time.Time, layout string) string {
	return fmt.Sprintf("%q", t.Format(layout))
}

// ========================================================
// fromString returns time.Time from a
// specific time string format
// ========================================================
func fromString(b []byte, layout string) (time.Time, error) {
	s := strings.Trim(string(b), `"`)
	_nt, _err := time.Parse(layout, s)
	return _nt, _err
}

// ============================================================================
// ============================================================================
// ============================================================================
type UTCTime time.Time

const UTCLayout = "2006-01-02T15:04:05.000000"

// ========================================================
// JSON Unmarshal for custum time UTCTime
// ========================================================
func (t *UTCTime) UnmarshalJSON(b []byte) (err error) {
	_time, _err := fromString(b, UTCLayout)
	*t = UTCTime(_time)
	return _err
}

// ========================================================
// JSON Marshal for custum time UTCTime
// ========================================================
func (t UTCTime) MarshalJSON() ([]byte, error) {
	return []byte(toString(time.Time(t), UTCLayout)), nil
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
